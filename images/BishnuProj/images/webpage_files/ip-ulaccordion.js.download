// START Prepend Fix for Static Site

function adjustMenu()
{
	if (!document.querySelectorAll)
	{
		(function(d, s)
		{
			d = document, s = d.createStyleSheet();
			d.querySelectorAll = function(r, c, i, j, a)
			{
				a = d.all, c = [], r = r.replace(/\[for\b/gi, '[htmlFor').split(',');
				for (i = r.length; i--;)
				{
					s.addRule(r[i], 'k:v');
					for (j = a.length; j--;)
						a[j].currentStyle.k && c.push(a[j]);
					s.removeRule(0);
				}
				return c;
			}
		})();
	}

	var strMenu = "[id='pageid" + ipCurrentPageDefID + "']"; // create the search string
	var menuList = document.querySelectorAll(strMenu); // execute search for all ID's
	for (var j = 0; j < menuList.length; j++)
	{ // loop through each item
		var anchor = menuList[j];
		if (!anchor)
		{
			return;
		}
		var anchorLevel = anchor.getAttribute("data-level");
		anchor.className = "ipf-active" + anchorLevel;
		var section = anchor;
		var depth = Number(anchorLevel);

		// Reset state
		// Work our way back to the root of the tree
		depth--;
		do
		{
			section = section.parentElement || section.parentNode;
		}
		while (depth--);

		// Get all the unordered list blocks
		var ulList = section.getElementsByTagName("ul");
		// Set them all to closed / non-displayed
		for (var i = 0; i < ulList.length; i++)
		{
			ulList[i].setAttribute("rel", "closed");
			ulList[i].style.display = "none";

		}

		// reset variables
		depth = Number(anchorLevel);
		section = anchor;

		// Activate children
		var childList = anchor.childNodes;
		for (var i = 0; i < childList.length; i++)
		{
			if (childList[i].tagName && (childList[i].tagName.toLowerCase() == "ul"))
			{
				childList[i].setAttribute("rel", "open");
				childList[i].style.display = "block";
			}
		}

		// Activate parents
		do
		{
			section = section.parentElement || section.parentNode;
			switch (section.tagName.toLowerCase())
			{
				case "ul":
					section.setAttribute("rel", "open");
					section.style.display = "block";
					depth--;
					break;
				case "li":
					section.className = "ipf-parent submenu ipf-sectionmenu-folderopen ipf-active" + depth;
					section.setAttribute("level", depth);
					break;
			}
		}
		while (depth);
	}
}
if (window.addEventListener)
{
	window.addEventListener("load", adjustMenu, false);
}
else if (window.attachEvent)
{
	window.attachEvent("onload", adjustMenu);
}
// END Prepend Fix for Static Site

var persisteduls = new Object();
var ddtreemenu = new Object();
ddtreemenu.contractothers = function(treeid, ulelement)
{
	var ultags = document.getElementById(treeid).getElementsByTagName("ul");
	for (var i = 0; i < ultags.length; i++)
	{
		var isChild = false;
		if (ulelement == ultags[i])
		{
			isChild = true;
		}
		else
		{
			var ulChildren = ultags[i].getElementsByTagName("ul");
			for (var j = 0; j < ulChildren.length; j++)
			{
				if (ulelement == ulChildren[j])
				{
					isChild = true;
					break;
				}
			}
		}
		if (!isChild)
		{
			ultags[i].style.display = "none";
			ultags[i].setAttribute("rel", "closed");
			ddtreemenu.setfolder(ultags[i].parentNode, false);
		}
	}
}
ddtreemenu.setfolder = function(ulelement, open)
{
	var classname = ulelement.className.replace(/\bipf-sectionmenu-folder\S*/g, "");
	if (open)
	{
		classname += " ipf-sectionmenu-folderopen";
	}
	else
	{
		classname += " ipf-sectionmenu-folderclose";
	}
	ulelement.className = classname.replace("  ", " ");
}
ddtreemenu.linkclicked = false;
ddtreemenu.setlinkclicked = function(treeid)
{
	var anchortags = document.getElementById(treeid).getElementsByTagName("a");
	var categorylink = document.location.href;
	if (!categorylink.endsWith("#")) categorylink += "#";
	for (var i = 0; i < anchortags.length; i++)
	{
		if (anchortags[i].href != categorylink)
		{
			anchortags[i].onclick = function()
			{
				ddtreemenu.linkclicked = true;
			}
		}
		else
		{
		}
	}
}

 * Simple Tree Menu-? Dynamic Drive DHTML code library (www.dynamicdrive.com) This notice MUST stay intact for legal use Visit Dynamic Drive at http://www.dynamicdrive.com/for full source code

ddtreemenu.createTree = function(treeid, enablepersist, persistdays)
{
	ddtreemenu.setlinkclicked(treeid);
	var ultags = document.getElementById(treeid).getElementsByTagName("ul")
	if (typeof persisteduls[treeid] == "undefined") persisteduls[treeid] = (enablepersist == true && ddtreemenu.getCookie(treeid) != "") ? ddtreemenu.getCookie(treeid).split(",") : ""
	for (var i = 0; i < ultags.length; i++)
		ddtreemenu.buildSubTree(treeid, ultags[i], i)
	if (enablepersist == true)
	{
		var durationdays = (typeof persistdays == "undefined") ? 1 : parseInt(persistdays)
	}
}
ddtreemenu.buildSubTree = function(treeid, ulelement, index)
{
	ulelement.parentNode.className += " submenu"
	if (typeof persisteduls[treeid] == "object")
	{ // if cookie exists (persisteduls[treeid] is an array versus "" string)
		if (ddtreemenu.searcharray(persisteduls[treeid], index))
		{
			ulelement.setAttribute("rel", "open")
			ulelement.style.display = "block"
			ddtreemenu.setfolder(ulelement.parentNode, true);
		}
		else
			ulelement.setAttribute("rel", "closed")
	}
	else if (ulelement.getAttribute("rel") == null || ulelement.getAttribute("rel") == false) // if no cookie and UL has NO rel attribute explicted added by user
		ulelement.setAttribute("rel", "closed")
	else if (ulelement.getAttribute("rel") == "open") // else if no cookie and this UL has an explicit rel value of "open"
	ddtreemenu.expandSubTree(treeid, ulelement)
	ulelement.parentNode.onclick = function(e)
	{
		if (ddtreemenu.linkclicked)
		{ // if a hyperlink has been clicked the page is changing so don't bother opening/closing the folder //MR
			ddtreemenu.linkclicked = false;
			return;
		}
		var submenu = this.getElementsByTagName("ul")[0]
		if (submenu.getAttribute("rel") == "closed")
		{
			submenu.style.display = "block"
			submenu.setAttribute("rel", "open")
			ddtreemenu.setfolder(ulelement.parentNode, true)
			ddtreemenu.contractothers(treeid, ulelement)
		}
		else if (submenu.getAttribute("rel") == "open")
		{
			submenu.style.display = "none"
			submenu.setAttribute("rel", "closed")
			ddtreemenu.setfolder(ulelement.parentNode, false)
		}
		ddtreemenu.preventpropagate(e)
	}
	ulelement.onclick = function(e)
	{
		ddtreemenu.preventpropagate(e)
	}
}
ddtreemenu.expandSubTree = function(treeid, ulelement)
{
	var rootnode = document.getElementById(treeid)
	var currentnode = ulelement
	currentnode.style.display = "block"
	ddtreemenu.setfolder(currentnode.parentNode, true)
	while (currentnode != rootnode)
	{
		if (currentnode.tagName == "UL")
		{ // if parent node is a UL, expand it too
			currentnode.style.display = "block"
			currentnode.setAttribute("rel", "open") // indicate it's open //MR
			ddtreemenu.setfolder(currentnode.parentNode, true)
		}
		currentnode = currentnode.parentNode
	}
}
ddtreemenu.flatten = function(treeid, action)
{
	var ultags = document.getElementById(treeid).getElementsByTagName("ul")
	for (var i = 0; i < ultags.length; i++)
	{
		ultags[i].style.display = (action == "expand") ? "block" : "none"
		var relvalue = (action == "expand") ? "open" : "closed"
		ultags[i].setAttribute("rel", relvalue)
		ddtreemenu.setfolder(ultags[i].parentNode, (action == "expand")) // MR
	}
}
ddtreemenu.rememberstate = function(treeid, durationdays)
{
	var ultags = document.getElementById(treeid).getElementsByTagName("ul")
	var openuls = new Array()
	for (var i = 0; i < ultags.length; i++)
	{
		if (ultags[i].getAttribute("rel") == "open") openuls[openuls.length] = i
	}
	if (openuls.length == 0) openuls[0] = "none open" // set array value to string to simply indicate all ULs should persist with state being closed
	ddtreemenu.setCookie(treeid, openuls.join(","), durationdays) // populate cookie with value treeid=1,2,3 etc (where 1,2... are the indexes of the opened ULs)
}
ddtreemenu.getCookie = function(Name)
{
	var re = new RegExp(Name + "=[^;]+", "i"); // construct RE to search for target name/value pair
	if (document.cookie.match(re)) return document.cookie.match(re)[0].split("=")[1] // return its value
	return ""
}
ddtreemenu.setCookie = function(name, value, days)
{
	var expireDate = new Date()
	var expstring = expireDate.setDate(expireDate.getDate() + parseInt(days))
	document.cookie = name + "=" + value + "; expires=" + expireDate.toGMTString() + "; path=/";
}
ddtreemenu.searcharray = function(thearray, value)
{
	var isfound = false
	for (var i = 0; i < thearray.length; i++)
	{
		if (thearray[i] == value)
		{
			isfound = true
			thearray.shift()
			break
		}
	}
	return isfound
}
ddtreemenu.preventpropagate = function(e)
{
	if (typeof e != "undefined")
		e.stopPropagation()
	else
		event.cancelBubble = true
}
ddtreemenu.dotask = function(target, functionref, tasktype)
{
	var tasktype = (window.addEventListener) ? tasktype : "on" + tasktype
	if (target.addEventListener)
		target.addEventListener(tasktype, functionref, false)
	else if (target.attachEvent) target.attachEvent(tasktype, functionref)
}